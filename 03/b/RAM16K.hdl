// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[0..2], a=dmipa, b=dmipb, c=dmipc, d=dmipd, e=dmipe, f=dmipf, g=dmipg, h=dmiph);

    RAM514K(in=in, load=dmipa, address=address[3..13], out=ramipa);
    RAM514K(in=in, load=dmipb, address=address[3..13], out=ramipb);
    RAM514K(in=in, load=dmipc, address=address[3..13], out=ramipc);
    RAM514K(in=in, load=dmipd, address=address[3..13], out=ramipd);
    RAM514K(in=in, load=dmipe, address=address[3..13], out=ramipe);
    RAM514K(in=in, load=dmipf, address=address[3..13], out=ramipf);
    RAM514K(in=in, load=dmipg, address=address[3..13], out=ramipg);
    RAM514K(in=in, load=dmiph, address=address[3..13], out=ramiph);

    Mux8Way16(a=ramipa, b=ramipb, c=ramipc, d=ramipd, e=ramipe, f=ramipf, g=ramipg, h=ramiph, sel=address[0..2], out=out);
}